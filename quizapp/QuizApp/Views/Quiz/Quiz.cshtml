@model QuizApp.ViewModel.Managing.TestingUrlViewModel

@{
    ViewBag.Title = "Quiz";
    //Layout = "~/Views/Shared/_QuizLayout.cshtml";
}

<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

    <script src="/Scripts/jquery-1.10.2.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
</head>
<body>

    <h2>Quiz</h2>

<div class="quiz">

</div>

<div class="att" id="myBackground">

</div>

    @using (Html.BeginForm())
    {
        <div class="form-horizontal" id="myP">

            <h4>TestingUrlViewModel</h4>
            <hr />

                <div class="form-group">
                    @Html.LabelFor(model => model.Guid, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Guid, new { htmlAttributes = new { @class = "form-control", @Disabled = "disabled", @Id = "test" } })
                        @Html.ValidationMessageFor(model => model.Guid, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.TestGuid, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.TestGuid, new { htmlAttributes = new { @class = "form-control", @Disabled = "disabled", @Id = "TestingGuid" } })
                        @Html.ValidationMessageFor(model => model.TestGuid, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.TestName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.TestName, new { htmlAttributes = new { @class = "form-control", @Disabled = "disabled" } })
                        @Html.ValidationMessageFor(model => model.TestName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Interviewee, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Interviewee, new { htmlAttributes = new { @class = "form-control", @Id = "Interviewee" } })
                        @Html.ValidationMessageFor(model => model.Interviewee, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.NumberOfRuns, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.NumberOfRuns, new { htmlAttributes = new { @class = "form-control", @Disabled = "disabled" } })
                        @Html.ValidationMessageFor(model => model.NumberOfRuns, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.AllowedStartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.AllowedStartDate, new { htmlAttributes = new { @class = "form-control", @Disabled = "disabled" } })
                        @Html.ValidationMessageFor(model => model.AllowedStartDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.AllowedEndDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.AllowedEndDate, new { htmlAttributes = new { @class = "form-control", @Disabled = "disabled" } })
                        @Html.ValidationMessageFor(model => model.AllowedEndDate, "", new { @class = "text-danger" })
                    </div>
                </div>

            <div class="form-group" id="myBack">
                <div class="col-md-offset-2 col-md-10">

                    <a onclick="return myFunction();" id="buttonUpload" class="btn btn-info btn-lg">Start TEST</a>

                </div>
            </div>

        </div>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>

</body>
</html>


@section scripts
{
    <script type="text/javascript">

        function myFunction() {
            document.getElementById("myP").style.visibility = "hidden";
            document.getElementById("myBack").style.visibility = "hidden";
            //document.getElementById("myBackground").style.visibility = "hidden";
        }

        var start = new Date();
        var startDate = start;

        $(document).ready(function() {
            $("#buttonUpload").click(function() {
                var getGuid =
                {
                    testingUrlGuid: $('#test').val()
                };

                $.ajax({
                    data: getGuid,
                    url: "/Quiz/GetInfoAndStartTest",
                    type: "GET",
                    contentType: "application/json;charset=utf-8",
                    dataType: "json",
                    success: function(results) {
                        debugger;
                        
                        $('.att').append($(`<input id='TestTimeLimit' class='form-control text-box single-line' name='TestTimeLimit' type='text'  value='${JSON.stringify(results.TestTimeLimit)}')>`).text(results.TestTimeLimit));
                        $('.att').append($(`<input id='QuestionTimeLimit' class='form-control text-box single-line' name='QuestionTimeLimit' type='text'  value='${JSON.stringify(results.QuestionTimeLimit)}')>`).text(results.QuestionTimeLimit));



                        for (var i = 0; i < results.Questions.length; i++)
                        {
                            
                           
                            $('.quiz').append($("</br></br></br>")).append($("<p id='instance'></p>").text(results.Questions[i].Instance)).append($("<p id='hint'></p>").text(results.Questions[i].Hint)).append($("</br>"))
                                .append($().text(results.Questions[i].Answers)).append($("</br>"));



                            for (var j = 0; j < results.Questions[i].Answers.length; j++) {

                                //<label class="radiocontainer"></label>

                                // в чекбоксі треба функцію, яка покліку буде робити тру:

                                $('.quiz').append($("<label class='radiocontainer'>"));


                                $('.quiz').append($("<input type='checkbox'>").text(results.Questions[i].Answers[j].IsSelected));

                                $('.quiz').append($("<span class='checkmark'></span>").text(results.Questions[i].Answers[j].Instance)).append($("</br>"));


                                $('.quiz').append($("</label>"));

                            }


                            $('.quiz').append($("<hr/>"));



                            // ЗАРАЗ ОЦЕ РОБЛЮ!
                            $('.att').append($(`<input id='Questions' class='form-control text-box single-line' name='Questions' type='text' value='${JSON.stringify(results.Questions[i])}'>`).text(results.Questions[i]));
                        }




                        $('.att').append($(`<input id='AttemptGuid' class='form-control text-box single-line' name='AttemptGuid' type='text' value='${results.AttemptGuid}'>`).text(results.AttemptGuid));
                       

                        //FINISH
                        $('.quiz').append($("<button type='button' class='btn btn-primary' id='finishTest' onclick=' return AddFinish(); '>Finish TEST</button>"));
                    }
                });
            });
        });

        //!!!Add Data Function
        function AddFinish() {
            debugger;

            var endDate = new Date();

            var empObj =
            {
                TestingGuid: $('#test').val(),//++

                Interviewee: $('#Interviewee').val(),//++

                TestTimeLimit: $('#TestTimeLimit').val(),//++
                QuestionTimeLimit: $('#QuestionTimeLimit').val(),//++

                //треба якось  передати Date при натисканні на старт тест:
                TestingStartDateTime: startDate,
                // треба якось передати Date при натисканні на AddFinish:
                TestingEndDateTime: endDate,

                //QuestionTried: $('#QuestionTried').val(),
                //Score: $('#Score').val(),

                AttemptGuid: $('#AttemptGuid').val(),//++

                Questions: $('#Questions').val()//++
            };
            alert(JSON.stringify(empObj));

            $.ajax({
                url: "/Quiz/FinishTest",
                data: JSON.stringify(empObj),
                type: "POST",
                contentType: "application/json;charset=utf-8",
                dataType: "json",

                success: function(result) {

                },
                error: function(errormessage) {
                    alert(errormessage.responseText);
                }
            });
        }
    </script>
}